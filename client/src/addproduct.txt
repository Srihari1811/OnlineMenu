import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { storage, ref, uploadBytes, getDownloadURL } from './firebase'; // Import from firebase.js
import './AddProduct.css';
import { useNavigate } from 'react-router-dom';

function AddProduct() {
  const [productName, setProductName] = useState('');
  const [productPrice, setProductPrice] = useState('');
  const [productImage, setProductImage] = useState(null);
  const [categoryId, setCategoryId] = useState('');
  const [categories, setCategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [editingProductId, setEditingProductId] = useState(null);
  const [editProductName, setEditProductName] = useState('');
  const [editProductPrice, setEditProductPrice] = useState('');
  const [showEditForm, setShowEditForm] = useState(false);
  const [alertMessage, setAlertMessage] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState('');

  const navigate = useNavigate();

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get('http://localhost:5000/addcategories');
        setCategories(response.data);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const query = selectedCategory ? `?category=${selectedCategory}` : '';
        const response = await axios.get(`http://localhost:5000/addproducts${query}`);
        setProducts(response.data);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };

    fetchProducts();
  }, [selectedCategory]);

  const handleAddProductSubmit = async (e) => {
    e.preventDefault();
    if (!productImage) {
      setAlertMessage('Please upload an image.');
      return;
    }

    try {
      const imageRef = ref(storage, `products/${productImage.name}`);
      await uploadBytes(imageRef, productImage);
      const imageUrl = await getDownloadURL(imageRef);

      const formData = new FormData();
      formData.append('name', productName);
      formData.append('price', productPrice);
      formData.append('imageUrl', imageUrl);
      formData.append('category', categoryId);

      const response = await axios.post('http://localhost:5000/addProducts', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setProducts((prevProducts) => [...prevProducts, response.data]);
      setProductName('');
      setProductPrice('');
      setProductImage(null);
      setCategoryId('');
      setAlertMessage('Product added successfully. Click Continue to redirect to HomePage.');
    } catch (error) {
      console.error('Failed to add product:', error);
      setAlertMessage('Failed to add product');
    }
  };

  const handleEdit = (product) => {
    setEditingProductId(product._id);
    setEditProductName(product.name);
    setEditProductPrice(product.price);
    setShowEditForm(true);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleUpdateProduct = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.put(`http://localhost:5000/addproducts/${editingProductId}`, {
        name: editProductName,
        price: editProductPrice,
      });

      setProducts((prevProducts) =>
        prevProducts.map((product) =>
          product._id === editingProductId ? response.data : product
        )
      );
      setEditingProductId(null);
      setEditProductName('');
      setEditProductPrice('');
      setShowEditForm(false);
      setAlertMessage('Product updated successfully');
    } catch (error) {
      console.error('Failed to update product:', error);
      setAlertMessage('Failed to update product');
    }
  };

  const handleRemoveProduct = async (productId) => {
    try {
      await axios.delete(`http://localhost:5000/addproducts/${productId}`);
      setProducts((prevProducts) =>
        prevProducts.filter((product) => product._id !== productId)
      );
    } catch (error) {
      console.error('Failed to remove product:', error);
      setAlertMessage('Failed to remove product');
    }
  };

  const handleContinue = () => {
    navigate('/');
  };

  const handleBack = () => {
    setAlertMessage(null);
  };

  const handleCategoryChange = (e) => {
    setSelectedCategory(e.target.value);
  };

  useEffect(() => {
    if (alertMessage) {
      const timer = setTimeout(() => setAlertMessage(null), 2000);
      return () => clearTimeout(timer);
    }
  }, [alertMessage]);

  return (
    <div className="container mt-5 d-flex flex-column align-items-center">
      {alertMessage ? (
        <div className="alert alert-success w-100 text-center" role="alert" style={{ maxWidth: '600px' }}>
          {alertMessage}
          <div className="d-flex justify-content-center mt-3">
            <button
              className="btn btn-primary mx-2"
              onClick={handleContinue}
              style={{ borderRadius: '0.25rem' }}
            >
              Continue
            </button>
            <button
              className="btn btn-secondary mx-2"
              onClick={handleBack}
              style={{ borderRadius: '0.25rem' }}
            >
              Back
            </button>
          </div>
        </div>
      ) : (
        <>
          {showEditForm ? (
            <div className="product-form p-4 rounded shadow mb-4" style={{ maxWidth: '800px', backgroundColor: '#f8f9fa' }}>
              <h2 className="text-center mb-4">Edit Product</h2>
              <form onSubmit={handleUpdateProduct}>
                <div className="form-group mb-3">
                  <label htmlFor="editProductName" className="form-label">Product Name</label>
                  <input
                    id="editProductName"
                    type="text"
                    className="form-control"
                    value={editProductName}
                    onChange={(e) => setEditProductName(e.target.value)}
                    required
                    style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}
                  />
                </div>
                <div className="form-group mb-3">
                  <label htmlFor="editProductPrice" className="form-label">Product Price (INR)</label>
                  <input
                    id="editProductPrice"
                    type="number"
                    className="form-control"
                    value={editProductPrice}
                    onChange={(e) => setEditProductPrice(e.target.value)}
                    required
                    style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}
                  />
                </div>

                <button type="submit" className="btn btn-primary w-100" style={{ borderRadius: '0.25rem' }}>Update Product</button>
              </form>
            </div>
          ) : (
            <div className="product-form p-4 rounded shadow mb-4" style={{ maxWidth: '800px', backgroundColor: '#f8f9fa' }}>
              <h2 className="text-center mb-4">Add Product</h2>
              <form onSubmit={handleAddProductSubmit}>
                <div className="form-group mb-3">
                  <label htmlFor="productName" className="form-label">Product Name</label>
                  <input
                    id="productName"
                    type="text"
                    className="form-control"
                    value={productName}
                    onChange={(e) => setProductName(e.target.value)}
                    required
                    style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}
                  />
                </div>
                <div className="form-group mb-3">
                  <label htmlFor="productPrice" className="form-label">Product Price (INR)</label>
                  <input
                    id="productPrice"
                    type="number"
                    className="form-control"
                    value={productPrice}
                    onChange={(e) => setProductPrice(e.target.value)}
                    required
                    style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}
                  />
                </div>
                <div className="form-group mb-3">
                  <label htmlFor="productImage" className="form-label">Product Image</label>
                  <input
                    id="productImage"
                    type="file"
                    className="form-control"
                    onChange={(e) => setProductImage(e.target.files[0])}
                    required
                    style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}
                  />
                </div>
                <div className="form-group mb-3">
                  <label htmlFor="category" className="form-label">Category</label>
                  <select
                    id="category"
                    className="form-select"
                    value={categoryId}
                    onChange={(e) => setCategoryId(e.target.value)}
                    required
                    style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}
                  >
                    <option value="">Select a category</option>
                    {categories.map((category) => (
                      <option key={category._id} value={category._id}>{category.name}</option>
                    ))}
                  </select>
                </div>

                <button type="submit" className="btn btn-primary w-100" style={{ borderRadius: '0.25rem' }}>Add Product</button>
              </form>
            </div>
          )}

          <div className="container mt-4" style={{ maxWidth: '800px' }}>
            <h3 className="text-center mb-4">Product List</h3>
            <div className="mb-3">
              <label htmlFor="categoryFilter" className="form-label">Filter by Category</label>
              <select
                id="categoryFilter"
                className="form-select"
                value={selectedCategory}
                onChange={handleCategoryChange}
                style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}
              >
                <option value="">All Categories</option>
                {categories.map((category) => (
                  <option key={category._id} value={category._id}>{category.name}</option>
                ))}
              </select>
            </div>
            <div className="row">
              {products.map((product) => (
                <div key={product._id} className="col-md-4 mb-4">
                  <div className="card" style={{ borderRadius: '0.25rem', borderColor: '#ced4da' }}>
                    <img src={product.imageUrl} className="card-img-top" alt={product.name} style={{ borderTopLeftRadius: '0.25rem', borderTopRightRadius: '0.25rem' }} />
                    <div className="card-body">
                      <h5 className="card-title">{product.name}</h5>
                      <p className="card-text">Price: {product.price} INR</p>
                      <button className="btn btn-warning mx-2" onClick={() => handleEdit(product)} style={{ borderRadius: '0.25rem' }}>Edit</button>
                      <button className="btn btn-danger mx-2" onClick={() => handleRemoveProduct(product._id)} style={{ borderRadius: '0.25rem' }}>Remove</button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </>
      )}
    </div>
  );
}

export default AddProduct;
